/* const map = L.map('map').setView([56, 93], 11);

L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
    maxZoom: 18,
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
        '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
    id: 'mapbox/streets-v11'
}).addTo(map);

const rand = (min, max) => Math.random() * (max - min) + min;

const gridSize = 1500;

async function bandsWithMask() {
    map.eachLayer(layer => {
        if (layer.options.type === "band") {
            map.removeLayer(layer)
        }
    })

    const points = [
        [55.986571, 92.762222, 0.0747704775481111],
        [56.0293, 92.76537, 0.213907208633093],
        [56.0987, 92.7427, 0.194830447761194],
        [55.986571, 92.762222, 0.0780714346895075],
        [55.997332, 92.777325, 0.0329284796573876],
        [56.013546, 92.877796, 0.195634773722628],
        [56.07743, 92.70456, 0.18732241900648],
        [56.00772, 92.82126, 0.226432948717949],
        [56.044, 92.72676, 0.172057313432836],
        [56.081751, 93.084937, 0.0836207620416966],
        [56.02562, 92.86059, 0.1409071682044],
        [56.089951, 92.859047, 0.106069063829787],
        [56.057395, 92.857812, 0.247632416725726],
        [56.01204, 92.97329, 0.136497572254335],
        [56.02594, 92.79871, 0.215188414192614],
        [55.978387, 92.677273, 0.065931373937677]
    ];
    // points.forEach(p => L.marker([p[0], p[1]]).bindPopup(p[2].toString()).addTo(map))

    const mask = dline.ascToArray(await fetch('./krs_cut.asc').then(res => res.text()));

    console.time('IDW with mask')
    const grid = dline.IDW(points, gridSize, { bbox: [10, 10], exponent: 3, units: ['meters', 'degrees'], mask, boundaries: [[20, 0.2], [-50, 0.1]] });
    console.timeEnd('IDW with mask')

    console.time('bands')
    const bands = dline.isobands(grid, [0.05, 0.1, 0.15, 0.2, 0.3, 0.6])
    console.timeEnd('bands')

    const colors = {
        "<0.05": "#34D800",
        "0.05-0.1": "#FFFF00",
        "0.1-0.15": "#FF9000",
        "0.15-0.2": "#FF0700",
        "0.2-0.3": "#A101A6",
        "0.3-0.6": "#4A11AE",
        "0.6<": "#090974",
    };

    bands.features.forEach(feature => {
        L.geoJSON(feature, { color: colors[feature.properties.value], weight: 0, fillOpacity: 0.7, type: "band" }).bindPopup(feature.properties.value.toString()).addTo(map);
    });
}

async function srtm() {
    map.eachLayer(layer => {
        if (layer.options.type === "band") {
            map.removeLayer(layer)
        }
    })

    console.time('convert')
    const grid = dline.ascToArray(await fetch('./krs_cut.asc').then(res => res.text()));
    console.timeEnd('convert')

    console.time('srtm')
    const bands = dline.isobands(grid, [140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 450, 500]);
    console.timeEnd('srtm')

    const colors = {
        "<140": "#1240AB",
        "140-160": "#0B61A4",
        "160-180": "#009999",
        "180-200": "#00AE68",
        "200-220": "#00CC00",
        "220-240": "#5DE100",
        "240-260": "#9BED00",
        "260-280": "#CCF600",
        "280-300": "#FFFF00",
        "300-320": "#FFE800",
        "320-340": "#FFD300",
        "340-360": "#FFBF00",
        "360-380": "#FFAA00",
        "380-400": "#FF9200",
        "400-450": "#FF7100",
        "450-500": "#FF4900",
        "500<": "#FF0000",
    };

    bands.features.forEach(feature => {
        L.geoJSON(feature, { color: colors[feature.properties.value], weight: 0, fillOpacity: 0.7, type: "band" }).bindPopup(feature.properties.value.toString()).addTo(map);
    });

}


function bands() {

    
    map.eachLayer(layer => {
        if (layer.options.type === "band") {
            map.removeLayer(layer)
        }
    })

    const points = [];
    for (let i = 0; i < 250; i++) {
        points.push([rand(55.9, 56.1), rand(92.6, 93.1), rand(0, 1)])
    }

    // const breaks = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1];


    const breaks = [0.05, 0.1, 0.15, 0.2, 0.3, 0.6];

    const g = dline.IDW(points, gridSize, { exponent: 4, units: ['meters', 'degrees'] })

    console.time('bands')
    const bands = dline.isobands(g, breaks)
    console.timeEnd('bands')

    const c = ["fc0102", "fa0204", "f80307", "f60409", "f4050c", "f2060e", "f00711", "ee0813", "ec0a15", "ea0b18", "e70c1a", "e50d1d", "e30e1f", "e10f22", "df1024", "dd1126", "db1329", "d9142b", "d7152e", "d41630", "d21733", "d01835", "ce1937", "cc1a3a", "ca1c3c", "c81d3f", "c61e41", "c41f44", "c22046", "c02148", "bd224b", "bb234d", "b92450", "b72652", "b52755", "b32857", "b12959", "af2a5c", "ad2b5e", "aa2c61", "a82d63", "a62f66", "a43068", "a2316a", "a0326d", "9e336f", "9c3472", "9a3574", "983677", "953879", "93397b", "913a7e", "8f3b80", "8d3c83", "8b3d85", "893e88", "873f8a", "85408c", "83428f", "804391", "7e4494", "7c4596", "7a4699", "78479b", "76489d", "7449a0", "724ba2", "704ca5", "6e4da7", "6b4eaa", "694fac", "6750ae", "6551b1", "6352b3", "6154b6", "5f55b8", "5d56bb", "5b57bd", "5958bf", "5659c2", "545ac4", "525bc7", "505cc9", "4e5ecc", "4c5fce", "4a60d0", "4861d3", "4662d5", "4463d8", "4164da", "3f65dd", "3d67df", "3b68e1", "3969e4", "376ae6", "356be9", "336ceb", "316dee", "2f6ef0", "2c70f3"];

    const cout = {};
    for (let i = 0; i < breaks.length - 1; i++) {

        cout[breaks[i] + "-" + breaks[i + 1]] = "#" + c[i];
    }

    console.log(cout);




    const cout = {
        "<0.05": "#00CC00",
        "0.05-0.1": "#FFFF00",
        "0.1-0.15": "#FFAA00",
        "0.15-0.2": "#FF1300",
        "0.2-0.3": "#C30083",
        "0.3-0.6": "#2C17B1",
        "0.6<": "#000000"
    };

    bands.features.forEach((feature, idx) => {
        L.geoJSON(feature, { color: cout[feature.properties.value], weight: 0, fillOpacity: 0.7, type: "band" }).bindPopup(feature.properties.value.toString()).addTo(map);
    });

    g.toGeoJson().features.forEach((feature, idx) => {
        L.geoJSON(feature, { type: "band" }).bindPopup(feature.properties.value.toString()).addTo(map);
    });
} */


const borderS = {
    "type": "Feature",
    "properties": {},
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [
                    92.626488,
                    55.970884999999996
                ],
                [
                    92.62732899999999,
                    55.973081
                ],
                [
                    92.653138,
                    55.975902
                ],
                [
                    92.655841,
                    55.978873
                ],
                [
                    92.659753,
                    55.978842
                ],
                [
                    92.659162,
                    55.981001
                ],
                [
                    92.654097,
                    55.982181
                ],
                [
                    92.652231,
                    55.984918
                ],
                [
                    92.65328699999999,
                    55.989988
                ],
                [
                    92.65199899999999,
                    55.991327
                ],
                [
                    92.652261,
                    55.994921
                ],
                [
                    92.65431199999999,
                    56.002545999999995
                ],
                [
                    92.656016,
                    56.004774999999995
                ],
                [
                    92.656824,
                    56.012982
                ],
                [
                    92.653562,
                    56.018316
                ],
                [
                    92.655908,
                    56.017781
                ],
                [
                    92.656725,
                    56.021848999999996
                ],
                [
                    92.650806,
                    56.021404999999994
                ],
                [
                    92.64988,
                    56.023761
                ],
                [
                    92.648088,
                    56.023767
                ],
                [
                    92.64803099999999,
                    56.025053
                ],
                [
                    92.654583,
                    56.024891
                ],
                [
                    92.658937,
                    56.030421999999994
                ],
                [
                    92.65383,
                    56.032891
                ],
                [
                    92.65162699999999,
                    56.036069999999995
                ],
                [
                    92.65623699999999,
                    56.036806
                ],
                [
                    92.659891,
                    56.039241
                ],
                [
                    92.666344,
                    56.040876
                ],
                [
                    92.671281,
                    56.043777
                ],
                [
                    92.67795,
                    56.045078
                ],
                [
                    92.683146,
                    56.048125
                ],
                [
                    92.697727,
                    56.051407
                ],
                [
                    92.69592999999999,
                    56.054815
                ],
                [
                    92.696737,
                    56.055326
                ],
                [
                    92.696355,
                    56.056649
                ],
                [
                    92.69747799999999,
                    56.057195
                ],
                [
                    92.701957,
                    56.057696
                ],
                [
                    92.70606,
                    56.059129999999996
                ],
                [
                    92.713804,
                    56.060519
                ],
                [
                    92.714766,
                    56.060956
                ],
                [
                    92.71467,
                    56.062022999999996
                ],
                [
                    92.7166,
                    56.061803999999995
                ],
                [
                    92.727237,
                    56.063798
                ],
                [
                    92.72817099999999,
                    56.065200999999995
                ],
                [
                    92.728296,
                    56.063576
                ],
                [
                    92.73257699999999,
                    56.067021
                ],
                [
                    92.732598,
                    56.067482999999996
                ],
                [
                    92.728535,
                    56.068343
                ],
                [
                    92.731157,
                    56.068632
                ],
                [
                    92.734186,
                    56.070266
                ],
                [
                    92.735968,
                    56.069311
                ],
                [
                    92.736043,
                    56.067861
                ],
                [
                    92.73751299999999,
                    56.067025
                ],
                [
                    92.738056,
                    56.06547
                ],
                [
                    92.732624,
                    56.061865999999995
                ],
                [
                    92.73160399999999,
                    56.058814999999996
                ],
                [
                    92.73383799999999,
                    56.058198
                ],
                [
                    92.73981099999999,
                    56.058854
                ],
                [
                    92.74072799999999,
                    56.058102999999996
                ],
                [
                    92.746709,
                    56.056808
                ],
                [
                    92.74828699999999,
                    56.055685
                ],
                [
                    92.74929499999999,
                    56.055873999999996
                ],
                [
                    92.750483,
                    56.054483
                ],
                [
                    92.760457,
                    56.066635
                ],
                [
                    92.760846,
                    56.069320999999995
                ],
                [
                    92.78017,
                    56.069317999999996
                ],
                [
                    92.77862999999999,
                    56.073265
                ],
                [
                    92.781482,
                    56.073043999999996
                ],
                [
                    92.785324,
                    56.071073999999996
                ],
                [
                    92.79377699999999,
                    56.060215
                ],
                [
                    92.797173,
                    56.057764999999996
                ],
                [
                    92.79688499999999,
                    56.054482
                ],
                [
                    92.799191,
                    56.051992999999996
                ],
                [
                    92.801588,
                    56.051474999999996
                ],
                [
                    92.802658,
                    56.050568999999996
                ],
                [
                    92.803603,
                    56.046726
                ],
                [
                    92.809697,
                    56.048119
                ],
                [
                    92.80858099999999,
                    56.048887
                ],
                [
                    92.822914,
                    56.050863
                ],
                [
                    92.831535,
                    56.051379
                ],
                [
                    92.83373499999999,
                    56.04835
                ],
                [
                    92.83491,
                    56.048291
                ],
                [
                    92.837436,
                    56.041523999999995
                ],
                [
                    92.838382,
                    56.041816
                ],
                [
                    92.844321,
                    56.044756
                ],
                [
                    92.848109,
                    56.048389
                ],
                [
                    92.848715,
                    56.049845999999995
                ],
                [
                    92.84561099999999,
                    56.050194999999995
                ],
                [
                    92.845158,
                    56.050804
                ],
                [
                    92.84978199999999,
                    56.052174
                ],
                [
                    92.848738,
                    56.054247999999994
                ],
                [
                    92.849744,
                    56.055096999999996
                ],
                [
                    92.858014,
                    56.055766
                ],
                [
                    92.870975,
                    56.059675
                ],
                [
                    92.869028,
                    56.064856999999996
                ],
                [
                    92.87091799999999,
                    56.065265
                ],
                [
                    92.871021,
                    56.066353
                ],
                [
                    92.868206,
                    56.072679
                ],
                [
                    92.86770399999999,
                    56.076854
                ],
                [
                    92.867674,
                    56.078474
                ],
                [
                    92.869232,
                    56.079753999999994
                ],
                [
                    92.86883999999999,
                    56.082819
                ],
                [
                    92.870145,
                    56.084418
                ],
                [
                    92.87745199999999,
                    56.084692
                ],
                [
                    92.89595299999999,
                    56.091229999999996
                ],
                [
                    92.89475999999999,
                    56.094085
                ],
                [
                    92.88788799999999,
                    56.095039
                ],
                [
                    92.887672,
                    56.095909999999996
                ],
                [
                    92.89137,
                    56.100074
                ],
                [
                    92.89013399999999,
                    56.109328
                ],
                [
                    92.890864,
                    56.112497999999995
                ],
                [
                    92.894832,
                    56.116831999999995
                ],
                [
                    92.895518,
                    56.118790999999995
                ],
                [
                    92.898781,
                    56.119062
                ],
                [
                    92.902987,
                    56.120957999999995
                ],
                [
                    92.902084,
                    56.117996
                ],
                [
                    92.908481,
                    56.114965999999995
                ],
                [
                    92.90843199999999,
                    56.114157
                ],
                [
                    92.911869,
                    56.11714
                ],
                [
                    92.910625,
                    56.121041
                ],
                [
                    92.91716199999999,
                    56.122189999999996
                ],
                [
                    92.918375,
                    56.121209
                ],
                [
                    92.919209,
                    56.121477999999996
                ],
                [
                    92.918121,
                    56.122479999999996
                ],
                [
                    92.926299,
                    56.122794999999996
                ],
                [
                    92.92746799999999,
                    56.121703999999994
                ],
                [
                    92.930385,
                    56.122685999999995
                ],
                [
                    92.933787,
                    56.122460999999994
                ],
                [
                    92.943123,
                    56.121427999999995
                ],
                [
                    92.94807399999999,
                    56.119617999999996
                ],
                [
                    92.942065,
                    56.113541999999995
                ],
                [
                    92.927183,
                    56.108582999999996
                ],
                [
                    92.924951,
                    56.104457999999994
                ],
                [
                    92.930544,
                    56.1025
                ],
                [
                    92.937328,
                    56.101206
                ],
                [
                    92.94603699999999,
                    56.10405
                ],
                [
                    92.947474,
                    56.099525
                ],
                [
                    92.95088899999999,
                    56.098555999999995
                ],
                [
                    92.957177,
                    56.093661999999995
                ],
                [
                    92.96116099999999,
                    56.093478999999995
                ],
                [
                    92.964196,
                    56.094305999999996
                ],
                [
                    92.97021199999999,
                    56.09444
                ],
                [
                    92.966645,
                    56.092095
                ],
                [
                    92.96522,
                    56.092150999999994
                ],
                [
                    92.962953,
                    56.090999999999994
                ],
                [
                    92.953164,
                    56.088457
                ],
                [
                    92.951799,
                    56.087221
                ],
                [
                    92.951906,
                    56.085857
                ],
                [
                    92.96176299999999,
                    56.088587
                ],
                [
                    92.975752,
                    56.095411
                ],
                [
                    92.97623,
                    56.095138999999996
                ],
                [
                    92.988615,
                    56.100733999999996
                ],
                [
                    92.988056,
                    56.10122
                ],
                [
                    92.991632,
                    56.10313
                ],
                [
                    92.994523,
                    56.10823
                ],
                [
                    92.99436299999999,
                    56.115418
                ],
                [
                    92.991468,
                    56.118173999999996
                ],
                [
                    92.980307,
                    56.121928
                ],
                [
                    92.970119,
                    56.121043
                ],
                [
                    92.962655,
                    56.133649999999996
                ],
                [
                    92.98562299999999,
                    56.132766
                ],
                [
                    92.990701,
                    56.133376
                ],
                [
                    92.992156,
                    56.130353
                ],
                [
                    92.99175199999999,
                    56.129129999999996
                ],
                [
                    92.99701999999999,
                    56.126483
                ],
                [
                    92.99656,
                    56.123104
                ],
                [
                    93.000999,
                    56.120422
                ],
                [
                    93.00107,
                    56.118257
                ],
                [
                    92.999817,
                    56.117129999999996
                ],
                [
                    93.00340299999999,
                    56.116633
                ],
                [
                    93.004542,
                    56.115525999999996
                ],
                [
                    93.00366199999999,
                    56.113932999999996
                ],
                [
                    93.007323,
                    56.112548999999994
                ],
                [
                    93.012025,
                    56.113988
                ],
                [
                    93.01454299999999,
                    56.114081999999996
                ],
                [
                    93.01825799999999,
                    56.116875
                ],
                [
                    93.02745999999999,
                    56.115555
                ],
                [
                    93.026996,
                    56.115054
                ],
                [
                    93.07123299999999,
                    56.109319
                ],
                [
                    93.07978,
                    56.111919
                ],
                [
                    93.084094,
                    56.114788999999995
                ],
                [
                    93.086621,
                    56.115536999999996
                ],
                [
                    93.089911,
                    56.114948
                ],
                [
                    93.09699599999999,
                    56.120129
                ],
                [
                    93.09796,
                    56.122631999999996
                ],
                [
                    93.103766,
                    56.124074
                ],
                [
                    93.110002,
                    56.123334
                ],
                [
                    93.10891099999999,
                    56.121278999999994
                ],
                [
                    93.114587,
                    56.122063999999995
                ],
                [
                    93.119829,
                    56.116735999999996
                ],
                [
                    93.11948699999999,
                    56.115493
                ],
                [
                    93.124023,
                    56.109933
                ],
                [
                    93.128424,
                    56.109215999999996
                ],
                [
                    93.13046399999999,
                    56.104929999999996
                ],
                [
                    93.14707399999999,
                    56.106821
                ],
                [
                    93.154009,
                    56.108345
                ],
                [
                    93.150661,
                    56.117895999999995
                ],
                [
                    93.163708,
                    56.109244999999994
                ],
                [
                    93.16815,
                    56.101462999999995
                ],
                [
                    93.16825299999999,
                    56.097896999999996
                ],
                [
                    93.166315,
                    56.094756999999994
                ],
                [
                    93.163399,
                    56.095634
                ],
                [
                    93.164104,
                    56.100652
                ],
                [
                    93.154574,
                    56.105833999999994
                ],
                [
                    93.131604,
                    56.103049
                ],
                [
                    93.131886,
                    56.095161999999995
                ],
                [
                    93.151206,
                    56.082497
                ],
                [
                    93.150685,
                    56.082055
                ],
                [
                    93.114408,
                    56.100271
                ],
                [
                    93.10744199999999,
                    56.096661999999995
                ],
                [
                    93.092547,
                    56.09514
                ],
                [
                    93.09158699999999,
                    56.092726
                ],
                [
                    93.093515,
                    56.088919
                ],
                [
                    93.091534,
                    56.086808
                ],
                [
                    93.085433,
                    56.085775
                ],
                [
                    93.089173,
                    56.084694999999996
                ],
                [
                    93.089378,
                    56.083534
                ],
                [
                    93.093643,
                    56.079330999999996
                ],
                [
                    93.100895,
                    56.076041999999994
                ],
                [
                    93.097644,
                    56.073608
                ],
                [
                    93.111404,
                    56.065467
                ],
                [
                    93.115792,
                    56.060629999999996
                ],
                [
                    93.12161499999999,
                    56.056326999999996
                ],
                [
                    93.131113,
                    56.052715
                ],
                [
                    93.123768,
                    56.05141
                ],
                [
                    93.093232,
                    56.071976
                ],
                [
                    93.079056,
                    56.077614
                ],
                [
                    93.067235,
                    56.079924
                ],
                [
                    93.05723599999999,
                    56.079986
                ],
                [
                    93.036788,
                    56.072998999999996
                ],
                [
                    93.032466,
                    56.075027
                ],
                [
                    93.030779,
                    56.07497
                ],
                [
                    93.023822,
                    56.072942
                ],
                [
                    93.01867399999999,
                    56.070363
                ],
                [
                    93.018276,
                    56.069168
                ],
                [
                    93.020668,
                    56.068805
                ],
                [
                    93.02064,
                    56.068219
                ],
                [
                    93.018537,
                    56.066727
                ],
                [
                    93.017117,
                    56.067358999999996
                ],
                [
                    93.014924,
                    56.066812
                ],
                [
                    93.018035,
                    56.065734
                ],
                [
                    93.02183199999999,
                    56.065718999999994
                ],
                [
                    93.023558,
                    56.063606
                ],
                [
                    93.027535,
                    56.062369
                ],
                [
                    93.02687,
                    56.060931
                ],
                [
                    93.022916,
                    56.059543999999995
                ],
                [
                    93.03826099999999,
                    56.058409999999995
                ],
                [
                    93.041637,
                    56.060275
                ],
                [
                    93.042346,
                    56.064623999999995
                ],
                [
                    93.05812999999999,
                    56.063575
                ],
                [
                    93.057126,
                    56.059929999999994
                ],
                [
                    93.064117,
                    56.053276
                ],
                [
                    93.073875,
                    56.051666999999995
                ],
                [
                    93.078384,
                    56.053658999999996
                ],
                [
                    93.085352,
                    56.050374
                ],
                [
                    93.08634099999999,
                    56.049502
                ],
                [
                    93.084745,
                    56.046507
                ],
                [
                    93.07685,
                    56.042123
                ],
                [
                    93.07291099999999,
                    56.038393
                ],
                [
                    93.06406,
                    56.034363
                ],
                [
                    93.065429,
                    56.033409999999996
                ],
                [
                    93.064712,
                    56.032235
                ],
                [
                    93.066766,
                    56.030603
                ],
                [
                    93.074889,
                    56.037335
                ],
                [
                    93.077708,
                    56.038467
                ],
                [
                    93.079169,
                    56.03738
                ],
                [
                    93.084003,
                    56.038756
                ],
                [
                    93.093871,
                    56.038070999999995
                ],
                [
                    93.094667,
                    56.034434
                ],
                [
                    93.09315099999999,
                    56.034214
                ],
                [
                    93.09289199999999,
                    56.030491999999995
                ],
                [
                    93.090398,
                    56.026567
                ],
                [
                    93.083612,
                    56.026385999999995
                ],
                [
                    93.08302499999999,
                    56.024024999999995
                ],
                [
                    93.097538,
                    56.023897
                ],
                [
                    93.112394,
                    56.022121999999996
                ],
                [
                    93.11355999999999,
                    56.02072
                ],
                [
                    93.111673,
                    56.020055
                ],
                [
                    93.108425,
                    56.014371
                ],
                [
                    93.094421,
                    56.015238999999994
                ],
                [
                    93.091433,
                    56.016608
                ],
                [
                    93.08180899999999,
                    56.019178999999994
                ],
                [
                    93.070483,
                    56.018919999999994
                ],
                [
                    93.065625,
                    56.017768999999994
                ],
                [
                    93.06412,
                    56.008191
                ],
                [
                    93.066441,
                    56.007999
                ],
                [
                    93.064826,
                    56.000758999999995
                ],
                [
                    93.06437,
                    55.999649999999995
                ],
                [
                    93.061954,
                    55.999832
                ],
                [
                    93.05970699999999,
                    55.991837
                ],
                [
                    93.057951,
                    55.990828
                ],
                [
                    93.05637,
                    55.982389999999995
                ],
                [
                    93.053455,
                    55.979617999999995
                ],
                [
                    93.05209699999999,
                    55.978749
                ],
                [
                    93.04649099999999,
                    55.978719
                ],
                [
                    93.04623699999999,
                    55.97944
                ],
                [
                    93.037633,
                    55.981804
                ],
                [
                    93.03415199999999,
                    55.973023
                ],
                [
                    93.02158299999999,
                    55.974534
                ],
                [
                    93.012672,
                    55.976537
                ],
                [
                    93.000495,
                    55.965371999999995
                ],
                [
                    92.995465,
                    55.959672999999995
                ],
                [
                    92.989778,
                    55.957702999999995
                ],
                [
                    92.98791,
                    55.956208
                ],
                [
                    92.986262,
                    55.954269
                ],
                [
                    92.98648399999999,
                    55.952976
                ],
                [
                    92.98057999999999,
                    55.954145
                ],
                [
                    92.980346,
                    55.953669
                ],
                [
                    92.975678,
                    55.953376
                ],
                [
                    92.97055999999999,
                    55.953702
                ],
                [
                    92.971408,
                    55.947663
                ],
                [
                    92.96472999999999,
                    55.946698
                ],
                [
                    92.92074199999999,
                    55.948552
                ],
                [
                    92.912598,
                    55.952233
                ],
                [
                    92.910929,
                    55.951539999999994
                ],
                [
                    92.907671,
                    55.951966999999996
                ],
                [
                    92.900414,
                    55.951451
                ],
                [
                    92.898709,
                    55.950773
                ],
                [
                    92.887806,
                    55.913624
                ],
                [
                    92.8857,
                    55.911607999999994
                ],
                [
                    92.88006,
                    55.912022
                ],
                [
                    92.87100799999999,
                    55.916787
                ],
                [
                    92.871201,
                    55.919205
                ],
                [
                    92.868726,
                    55.919653999999994
                ],
                [
                    92.85799899999999,
                    55.91505
                ],
                [
                    92.85324899999999,
                    55.918551
                ],
                [
                    92.852862,
                    55.922433
                ],
                [
                    92.850291,
                    55.9261
                ],
                [
                    92.85152699999999,
                    55.930397
                ],
                [
                    92.84547099999999,
                    55.934315
                ],
                [
                    92.842883,
                    55.939595999999995
                ],
                [
                    92.837505,
                    55.941497999999996
                ],
                [
                    92.83521499999999,
                    55.941494999999996
                ],
                [
                    92.83520399999999,
                    55.941916
                ],
                [
                    92.837126,
                    55.941941
                ],
                [
                    92.836877,
                    55.944585
                ],
                [
                    92.812159,
                    55.949701
                ],
                [
                    92.80681799999999,
                    55.951826999999994
                ],
                [
                    92.792901,
                    55.952031999999996
                ],
                [
                    92.786227,
                    55.950058999999996
                ],
                [
                    92.781857,
                    55.947934999999994
                ],
                [
                    92.781217,
                    55.948164999999996
                ],
                [
                    92.784745,
                    55.951673
                ],
                [
                    92.758602,
                    55.95178
                ],
                [
                    92.682688,
                    55.956604999999996
                ],
                [
                    92.677165,
                    55.956202
                ],
                [
                    92.67419,
                    55.954657
                ],
                [
                    92.67504799999999,
                    55.958714
                ],
                [
                    92.6789,
                    55.962381
                ],
                [
                    92.679802,
                    55.964343
                ],
                [
                    92.679093,
                    55.964234999999995
                ],
                [
                    92.678553,
                    55.966255
                ],
                [
                    92.66424099999999,
                    55.97226
                ],
                [
                    92.638706,
                    55.968782
                ],
                [
                    92.635938,
                    55.969058999999994
                ],
                [
                    92.63568,
                    55.968132
                ],
                [
                    92.632054,
                    55.967687
                ],
                [
                    92.628771,
                    55.967855
                ],
                [
                    92.626488,
                    55.970884999999996
                ]
            ]
        ]
    }
}

const ppol = {
    "type": "Feature",
    "properties": {},
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [
                    92.66281127929686,
                    56.134072188366915
                ],
                [
                    92.57904052734375,
                    56.081998717361955
                ],
                [
                    92.559814453125,
                    56.00759545784284
                ],
                [
                    92.59277343749999,
                    55.94919982336744
                ],
                [
                    92.75070190429688,
                    55.92073845157609
                ],
                [
                    92.92373657226562,
                    55.90919410026879
                ],
                [
                    93.10638427734375,
                    55.9130425993163
                ],
                [
                    93.23410034179688,
                    55.93304863776238
                ],
                [
                    93.29452514648436,
                    55.973029742284794
                ],
                [
                    93.32473754882812,
                    56.02755267625243
                ],
                [
                    93.31375122070312,
                    56.100385634419965
                ],
                [
                    93.26431274414062,
                    56.153199138696685
                ],
                [
                    93.16268920898438,
                    56.173845556307036
                ],
                [
                    92.99789428710936,
                    56.17919651972362
                ],
                [
                    92.83721923828125,
                    56.18072522942644
                ],
                [
                    92.69302368164062,
                    56.160847254089816
                ],
                [
                    92.6422119140625,
                    56.14631453300371
                ],
                [
                    92.66281127929686,
                    56.134072188366915
                ]
            ]
        ]
    }
}





const map = new ol.Map({
    target: 'map',
    layers: [
        new ol.layer.Tile({
            source: new ol.source.XYZ({
                url: 'https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png'
            }),
        })
    ],
    view: new ol.View({
        center: ol.proj.transform([92.765433, 56.029337], 'EPSG:4326', 'EPSG:3857'),
        zoom: 12
    })
});


async function go() {


    map.getLayers().forEach(function (layer) {
        if (layer.values_.name === 'band')
            map.removeLayer(layer);
    });

    const rand = (min, max) => Math.random() * (max - min) + min;

    const points = [];
    for (let i = 0; i < 50; i++) {
        points.push([rand(55.8, 56.2), rand(92.25, 93.4), rand(0, 0.32)])
    }

    // const breaks = [0.05, 0.1, 0.15, 0.2, 0.3, 0.6];

    /*   const cout = {
          "<0.05": "#00CC00",
          "0.05-0.1": "#FFFF00",
          "0.1-0.15": "#FFAA00",
          "0.15-0.2": "#FF1300",
          "0.2-0.3": "#C30083",
          "0.3-0.6": "#2C17B1",
          "0.6<": "#000000"
      }; */

    /*  const breaks = [0, 0.0500, 0.0525, 0.0550, 0.0575, 0.0600, 0.0625, 0.0650, 0.0675, 0.0700, 0.0725, 0.0750, 0.0775, 0.0800, 0.0825, 0.0850, 0.0875, 0.0900, 0.0925, 0.0950, 0.0975, 0.1000, 0.1025, 0.1050, 0.1075, 0.1100, 0.1125, 0.1150, 0.1175, 0.1200, 0.1225, 0.1250, 0.1275, 0.1300, 0.1325, 0.1350, 0.1375, 0.1400, 0.1425, 0.1450, 0.1475, 0.1500, 0.1525, 0.1550, 0.1575, 0.1600, 0.1625, 0.1650, 0.1675, 0.1700, 0.1725, 0.1750, 0.1775, 0.1800, 0.1825, 0.1850, 0.1875, 0.1900, 0.1925, 0.1950, 0.1975, 0.2000, 0.2050, 0.2100, 0.2150, 0.2200, 0.2250, 0.2300, 0.2350, 0.2400, 0.2450, 0.2500, 0.2550, 0.2600, 0.2650, 0.2700, 0.2750, 0.2800, 0.2850, 0.2900, 0.2950, 0.3000, 0.3150, 0.3300, 0.3450, 0.3600, 0.3750, 0.3900, 0.4050, 0.4200, 0.4350, 0.4500, 0.4650, 0.4800, 0.4950, 0.5100, 0.5250, 0.5400, 0.5550, 0.5700, 0.5850, 0.6000, 1];
     const colors = ["0c9c63", "199f60", "26a35e", "33a65b", "3faa59", "4cad56", "59b154", "65b451", "72b84f", "7fbb4c", "8cbe49", "a5c544", "b2c942", "bfcc3f", "ccd03d", "d8d33a", "f2da35", "ffde32",
         "ffd733", "ffd333", "ffd033", "ffc932", "ffc533", "ffc233", "ffbe33", "ffbb33", "ffb833", "ffb433", "ffb133", "ffad33", "ffa633", "ffa333", "ff9f33", "ff9c33", "ff9833",
         "f98933", "f78233", "f47a33", "ef6b32", "ed6333", "ea5b33", "e85433", "e54c33", "e24433", "e03d33", "dd3533", "db2d33", "d61e33", "d31633", "d10f33", "ce0733", "cc0033",
         "c1003d", "bc0042", "b70047", "ad0051", "a80056", "a3005b", "9e0060", "990065", "93006b", "8e0070", "890075", "84007a", "7f007f", "7a0084", "750089", "70008e", "6b0093", "650099",
         "68008d", "6a0081", "6d0075", "6e006f", "6f0069", "700063", "72005e", "730058", "740052", "75004c", "760046", "780040", "79003a", "7a0034", "7b002e", "7c0028", "7e0022",
         "71001f", "6b001d", "64001c", "580018", "510016", "4b0015", "450013", "3f0011", "38000f", "32000e", "2c000c", "1f0008", "190006", "120005"]
 
 
     const cout = {
         "<0.05": "#0c9c63",
         "0.6<": "#060001",
     };
     for (let i = 0; i < breaks.length - 1; i++) {
 
         cout[breaks[i] + "-" + breaks[i + 1]] = "#" + colors[i];
     } */

    // console.time('req')
    // const mask = dline.ascToArray(await fetch('./krs_cut.asc').then(res => res.text()));
    // console.timeEnd('req')

    const g = dline.IDW(points, 100, { exponent: 2, units: ['meters', 'degrees'] }, 30)

    console.log('points', g);

    console.time('srtm')
    const bands = dline.isobands(g, [0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], borderS);



    // const turfbands = turf.isobands(g.toGeoJson(), [0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], {zProperty: 'value'});
    console.timeEnd('srtm')

    console.log('bands', bands);



    for (let i = 0; i < bands.features.length; i++) {



        /*  for (let j = 0; j < bands.features[i].geometry.coordinates.length; j++) {
             const cutted = polygonClipping.intersection(borderS.features[0].geometry.coordinates, bands.features[i].geometry.coordinates[j])[0]
 
             if (cutted) {
                 bands.features[i].geometry.coordinates[j] = cutted;
             } else {
                 bands.features[i].geometry.coordinates.splice(j, 1);
             }
 
         } */

    }

    /* 
        bands.features.forEach(f => {
            f.geometry.coordinates.forEach(c => {
                const cutted = polygonClipping.intersection(borderS.features[0].geometry.coordinates, c)[0]
    
    
    
                if (cutted) {
    
                    c.forEach((e, i) => {
                        e.forEach(as => {
                            as = 'asdasd'
                        })
                        // console.log(e, cutted[i]);
                    })
                }
            })
    
        }) */

    // console.log('tet', bands);


    const cout = {
        "<0": "#1240AB",
        "0-0.02": "#0B61A4",
        "0.02-0.04": "#009999",
        "0.04-0.06": "#00AE68",
        "0.06-0.08": "#00CC00",
        "0.08-0.1": "#5DE100",
        "0.1-0.12": "#9BED00",
        "0.12-0.14": "#CCF600",
        "0.14-0.16": "#FFFF00",
        "0.16-0.18": "#FFE800",
        "0.18-0.2": "#FFD300",
        "0.2-0.22": "#FFBF00",
        "0.22-0.24": "#FFAA00",
        "0.24-0.26": "#FF9200",
        "0.26-0.28": "#FF7100",
        "0.28-0.3": "#FF4900",
        "0.3<": "#FF0000",
    };


    /* console.time('IDW with mask')
    const idw = dline.IDW(points, 700, { bbox: [10, 10], exponent: 3, units: ['meters', 'degrees'], mask, boundaries: [[20, 0.2], [-50, 0.1]] });
    console.timeEnd('IDW with mask')
 */
    /*   console.time('IDW')
      const idw = dline.IDW(points, 700, { bbox: [10, 10], exponent: 3, units: ['meters', 'degrees'], });
      console.timeEnd('IDW')
   */
    /* console.time('asd');
    // const bands = turf.isobands(idw, breaks, { zProperty: 'value' });
    const bands = dline.isobands(idw, breaks);
    console.timeEnd('asd'); */

    console.log(borderS);

    let vectorSourceP = new ol.source.Vector({
        features: (new ol.format.GeoJSON({
            featureProjection: 'EPSG:3857',
            dataProjection: 'EPSG:4326'
        })).readFeatures(bands)
    })

    let vectorLayerP = new ol.layer.Vector({
        source: vectorSourceP,
        name: 'band'
    });

    vectorLayerP.setOpacity(0.7)
    vectorLayerP.setStyle((e) => new ol.style.Style({
        fill: new ol.style.Fill({ color: cout[e.values_.value] }),
        stroke: new ol.style.Stroke({ width: 0, color: cout[e.values_.value] })
    }))

    /*  let sP = new ol.source.Vector({
         features: (new ol.format.GeoJSON({
             featureProjection: 'EPSG:3857',
             dataProjection: 'EPSG:4326'
         })).readFeatures(idw.toGeoJson())
     })
 
     let lP = new ol.layer.Vector({
         source: sP,
         name: 'band'
     }); */

    map.addLayer(vectorLayerP);
    // map.addLayer(lP);
}


const exp = 4;
const si = 100;


async function bandsWithMask() {
    map.getLayers().forEach(function (layer) {
        if (layer.values_.name === 'band')
            map.removeLayer(layer);
    });

    const points = [
        [55.986571, 92.762222, 0.0747704775481111],
        [56.0293, 92.76537, 0.213907208633093],
        [56.0987, 92.7427, 0.194830447761194],
        [55.986571, 92.762222, 0.0780714346895075],
        [55.997332, 92.777325, 0.0329284796573876],
        [56.013546, 92.877796, 0.195634773722628],
        [56.07743, 92.70456, 0.18732241900648],
        [56.00772, 92.82126, 0.226432948717949],
        [56.044, 92.72676, 0.172057313432836],
        [56.081751, 93.084937, 0.0836207620416966],
        [56.02562, 92.86059, 0.1409071682044],
        [56.089951, 92.859047, 0.106069063829787],
        [56.057395, 92.857812, 0.247632416725726],
        [56.01204, 92.97329, 0.136497572254335],
        [56.02594, 92.79871, 0.215188414192614],
        [55.978387, 92.677273, 0.065931373937677]
    ];
    // points.forEach(p => L.marker([p[0], p[1]]).bindPopup(p[2].toString()).addTo(map))

    const mask = dline.ascToArray(await fetch('./krs_cut.asc').then(res => res.text()));

    console.time('IDW with mask')
    const grid = dline.IDW(points, si, { bbox: [10, 10], exponent: exp, units: ['meters', 'meters'], mask, boundaries: [[20, 0.2], [-50, 0.1]] });
    console.timeEnd('IDW with mask')

    console.time('bands')
    const bands = dline.isobands(grid, [0.05, 0.1, 0.15, 0.2, 0.3, 0.6])
    console.timeEnd('bands')

    const colors = {
        "<0.05": "#34D800",
        "0.05-0.1": "#FFFF00",
        "0.1-0.15": "#FF9000",
        "0.15-0.2": "#FF0700",
        "0.2-0.3": "#A101A6",
        "0.3-0.6": "#4A11AE",
        "0.6<": "#090974",
    };

    let vectorSourceP = new ol.source.Vector({
        features: (new ol.format.GeoJSON({
            featureProjection: 'EPSG:3857',
            dataProjection: 'EPSG:4326'
        })).readFeatures(bands)
    })

    let vectorLayerP = new ol.layer.Vector({
        source: vectorSourceP,
        name: 'band'
    });

    vectorLayerP.setOpacity(0.7)
    vectorLayerP.setStyle((e) => new ol.style.Style({
        fill: new ol.style.Fill({ color: colors[e.values_.value] }),
        stroke: new ol.style.Stroke({ width: 0, color: colors[e.values_.value] })
    }))

    map.addLayer(vectorLayerP);

}


async function srtm() {
    map.getLayers().forEach(function (layer) {
        if (layer.values_.name === 'band')
            map.removeLayer(layer);
    });

    const points = [
        [55.986571, 92.762222, 0.0747704775481111],
        [56.0293, 92.76537, 0.213907208633093],
        [56.0987, 92.7427, 0.194830447761194],
        [55.986571, 92.762222, 0.0780714346895075],
        [55.997332, 92.777325, 0.0329284796573876],
        [56.013546, 92.877796, 0.195634773722628],
        [56.07743, 92.70456, 0.18732241900648],
        [56.00772, 92.82126, 0.226432948717949],
        [56.044, 92.72676, 0.172057313432836],
        [56.081751, 93.084937, 0.0836207620416966],
        [56.02562, 92.86059, 0.1409071682044],
        [56.089951, 92.859047, 0.106069063829787],
        [56.057395, 92.857812, 0.247632416725726],
        [56.01204, 92.97329, 0.136497572254335],
        [56.02594, 92.79871, 0.215188414192614],
        [55.978387, 92.677273, 0.065931373937677]
    ];
    // points.forEach(p => L.marker([p[0], p[1]]).bindPopup(p[2].toString()).addTo(map))

    // const mask = dline.ascToArray(await fetch('./krs_cut.asc').then(res => res.text()));

    console.time('IDW with mask')
    const grid = dline.IDW(points, si, { bbox: [10, 10], exponent: exp, units: ['meters', 'meters'] });
    console.timeEnd('IDW with mask')

    console.time('bands')
    const bands = dline.isobands(grid, [0.05, 0.1, 0.15, 0.2, 0.3, 0.6])
    console.timeEnd('bands')

    const colors = {
        "<0.05": "#34D800",
        "0.05-0.1": "#FFFF00",
        "0.1-0.15": "#FF9000",
        "0.15-0.2": "#FF0700",
        "0.2-0.3": "#A101A6",
        "0.3-0.6": "#4A11AE",
        "0.6<": "#090974",
    };

    let vectorSourceP = new ol.source.Vector({
        features: (new ol.format.GeoJSON({
            featureProjection: 'EPSG:3857',
            dataProjection: 'EPSG:4326'
        })).readFeatures(bands)
    })

    let vectorLayerP = new ol.layer.Vector({
        source: vectorSourceP,
        name: 'band'
    });

    vectorLayerP.setOpacity(0.7)
    vectorLayerP.setStyle((e) => new ol.style.Style({
        fill: new ol.style.Fill({ color: colors[e.values_.value] }),
        stroke: new ol.style.Stroke({ width: 0, color: colors[e.values_.value] })
    }))

    map.addLayer(vectorLayerP);

}


async function srtm2() {
    map.getLayers().forEach(function (layer) {
        if (layer.values_.name === 'band')
            map.removeLayer(layer);
    });

    console.time('convert')
    const grid = dline.ascToArray(await fetch('./ac_2019.asc').then(res => res.text()));
    console.timeEnd('convert')

    const rr = [100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700];
    const r2 = [270, 300, 330, 360, 390, 420, 450, 480, 510, 540, 570, 600, 630, 660, 690, 720, 750, 780, 810, 840, 870, 900];

    console.time('srtm')
    const bands = dline.isobands(grid, r2);
    console.timeEnd('srtm')

    const colors = generateScheme(r2);




    /* const colors = {
        "<100": "#0B61A4",
        "100-120": "#0776A0",
        "120-140": "#009999",
        "140-160": "#00A480",
        "160-180": "#00AF64",
        "180-200": "#00B945",
        "200-220": "#00C90D",
        "220-240": "#3BDA00",
        "240-260": "#62E200",
        "260-280": "#84E900",
        "280-300": "#9BED00",
        "300-320": "#B4F200",
        "320-340": "#C9F600",
        "340-360": "#E2FA00",
        "360-380": "#FFFD00",
        "380-400": "#FFEF00",
        "400-420": "#FFE500",
        "420-440": "#FFDD00",
        "440-460": "#FFD200",
        "460-480": "#FFC700",
        "480-500": "#FFBE00",
        "500-520": "#FFB600",
        "520-540": "#FFA900",
        "540-560": "#FF9C00",
        "560-580": "#FF9000",
        "580-600": "#FF8500",
        "600-620": "#FF7100",
        "620-640": "#FF5F00",
        "640-660": "#FF4500",
        "660-680": "#FF2300",
        "680-700": "#FD0006",
        "700<": "#EF002A",
    }; */
    console.log(colors);

    let vectorSourceP = new ol.source.Vector({
        features: (new ol.format.GeoJSON({
            featureProjection: 'EPSG:3857',
            dataProjection: 'EPSG:4326'
        })).readFeatures(bands)
    })

    let vectorLayerP = new ol.layer.Vector({
        source: vectorSourceP,
        name: 'band'
    });

    vectorLayerP.setOpacity(0.7)
    vectorLayerP.setStyle((e) => new ol.style.Style({
        fill: new ol.style.Fill({ color: colors[e.values_.value] }),
        stroke: new ol.style.Stroke({ width: 0, color: colors[e.values_.value] })
    }))

    map.addLayer(vectorLayerP);

}


async function srtm3() {
    map.getLayers().forEach(function (layer) {
        if (layer.values_.name === 'band')
            map.removeLayer(layer);
    });

    console.time('convert')
    const grid = dline.ascToArray(await fetch('./ac_2019.asc').then(res => res.text()));
    console.timeEnd('convert')

    const rr = [100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700];
    const r2 = [270, 300, 330, 360, 390, 420, 450, 480, 510, 540, 570, 600, 630, 660, 690, 720, 750, 780, 810, 840, 870, 900];

    console.time('srtm')
    const bands = dline.isolines(grid, r2);
    console.timeEnd('srtm')

    console.log(bands);

    const colors = generateScheme(r2);


    /* const colors = {
        "<140": "#1240AB",
        "140-160": "#0B61A4",
        "160-180": "#009999",
        "180-200": "#00AE68",
        "200-220": "#00CC00",
        "220-240": "#5DE100",
        "240-260": "#9BED00",
        "260-280": "#CCF600",
        "280-300": "#FFFF00",
        "300-320": "#FFE800",
        "320-340": "#FFD300",
        "340-360": "#FFBF00",
        "360-380": "#FFAA00",
        "380-400": "#FF9200",
        "400-450": "#FF7100",
        "450-500": "#FF4900",
        "500<": "#FF0000",
    }; */

    let vectorSourceP = new ol.source.Vector({
        features: (new ol.format.GeoJSON({
            featureProjection: 'EPSG:3857',
            dataProjection: 'EPSG:4326'
        })).readFeatures(bands)
    })

    let vectorLayerP = new ol.layer.Vector({
        source: vectorSourceP,
        name: 'band'
    });

    vectorLayerP.setOpacity(0.7)
    vectorLayerP.setStyle((e) => new ol.style.Style({
        fill: new ol.style.Fill({ color: "#000" }),
        stroke: new ol.style.Stroke({ width: 0, color: "#0000FF" }),
        /* text: new ol.style.Text({
            font: "8px sans-serif",
            text: e.values_.value.toString(),
            fill: new ol.style.Fill({ color: "#000" }),
            stroke: new ol.style.Stroke({ width: 0, color: "#fff" }),

        }) */
    }))

    map.addLayer(vectorLayerP);

}


function GenerateColor(colorStart, colorEnd, colorCount) {
    // The beginning of your gradient
    var start = [
        colorStart.split(',')[0].split('rgb(')[1],
        colorStart.split(',')[1],
        colorStart.split(',')[2].split(')')[0],
    ]
    // The end of your gradient
    var end = [
        colorEnd.split(',')[0].split('rgb(')[1],
        colorEnd.split(',')[1],
        colorEnd.split(',')[2].split(')')[0],
    ];
    // The number of colors to compute
    var len = colorCount - 1;
    //Alpha blending amount
    var alpha = 0.0;
    var saida = [];
    saida.push(colorEnd);
    for (let i = 0; i < len; i++) {
        var c = [];
        alpha += (1.0 / len);
        c[0] = (start[0] * alpha + (1 - alpha) * end[0]).toFixed(0);
        c[1] = (start[1] * alpha + (1 - alpha) * end[1]).toFixed(0);
        c[2] = (start[2] * alpha + (1 - alpha) * end[2]).toFixed(0);
        saida.push(`rgb(${c[0]},${c[1]},${c[2]})`);
    }
    return saida;
};


function generateScheme(range) {



    const c1 = GenerateColor('rgb(59,218,0)', 'rgb(255,255,0)', 7);
    c1.splice(c1.length, 1)

    const c2 = GenerateColor('rgb(15,77,168)', 'rgb(59,218,0)', 9);
    c2.splice(c2.length, 1)

    const c3 = GenerateColor('rgb(104,11,171)', 'rgb(15,77,168)', 6);

    console.log(c1, c2, c3);




    const clrs = [...c1, ...c2, ...c3];

    console.log(clrs);


    const out = {};

    out['<' + range[0]] = clrs[0];

    for (let i = 0; i < range.length - 1; i++) {
        out[range[i] + '-' + range[i + 1]] = clrs[i];
    }

    out[range[range.length - 1] + '<'] = clrs[clrs.length - 1];


    return out;

}
